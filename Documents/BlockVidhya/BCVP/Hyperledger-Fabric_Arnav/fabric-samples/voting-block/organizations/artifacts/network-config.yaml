---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "voting-block"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in https headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "The basic network"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  voting-channel:
    orderers:
      - orderer.example.com

    peers:
      peer0.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: false
        ledgerQuery: true
        eventSource: true

      peer1.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: false
        ledgerQuery: true
        eventSource: true

      peer2.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: false
        ledgerQuery: true
        eventSource: true

      peer3.org1.example.com:
        endorsingPeer: true
        chaincodeQuery: false
        ledgerQuery: true
        eventSource: true

      peer0.org2.example.com:
        endorsingPeer: false
        chaincodeQuery: true
        ledgerQuery: true
        eventSource: true

      chaincodes:
      - mycc:v0

#
# list of participating organizations in this network
#
organizations:
  Org1:
    mspid: Org1MSP

    peers:
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer2.org1.example.com
      - peer3.org1.example.com

    certificateAuthorities:
      - ca-org1

    adminPrivateKey:
      path: ../crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/da87158f4f9a3ead63567274d5b6cf3c82fd9a1cee2bd67884bbaa214bf5e66b_sk
    signedCert:
      path: ../crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem


  Org2:
    mspid: Org2MSP

    peers:
      - peer0.org2.example.com

    certificateAuthorities:
      - ca-org2

    adminPrivateKey:
      path: ../crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/keystore/2ad0ed0c9a9620d5bf024e8d2e8b3bc5a63afdea26a01439566d2040d7043fb9_sk
    signedCert:
      path: ../crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/signcerts/Admin@org2.example.com-cert.pem

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.example.com:
    url: grpcs://localhost:7050

    grpcOptions:
      ssl-target-name-override: orderer.example.com

    tlsCACerts:
      path: ../crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.org1.example.com:
    url: grpcs://localhost:7051

    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com
      request-timeout: 400001

    tlsCACerts:
      path: ../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt

  peer1.org1.example.com:
    url: grpcs://localhost:8051

    grpcOptions:
      ssl-target-name-override: peer1.org1.example.com
      request-timeout: 400001

    tlsCACerts:
      path: ../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt

  peer2.org1.example.com:
    url: grpcs://localhost:9051

    grpcOptions:
      ssl-target-name-override: peer2.org1.example.com
      request-timeout: 400001

    tlsCACerts:
      path: ../crypto-config/peerOrganizations/org1.example.com/peers/peer2.org1.example.com/tls/ca.crt

  peer3.org1.example.com:
    url: grpcs://localhost:10051

    grpcOptions:
      ssl-target-name-override: peer3.org1.example.com
      request-timeout: 400001

    tlsCACerts:
      path: ../crypto-config/peerOrganizations/org1.example.com/peers/peer3.org1.example.com/tls/ca.crt

  peer0.org2.example.com:
    url: grpcs://localhost:11051

    grpcOptions:
      ssl-target-name-override: peer0.org2.example.com
      request-timeout: 400001

    tlsCACerts:
      path: ../crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt

# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca-org1:
    url: https://localhost:7054
    # the properties specified under this object are passed to the 'https' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-org1

  ca-org2:
    url: https://localhost:8054
    # the properties specified under this object are passed to the 'https' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: adminpw
    # [Optional] The optional name of the CA.
    caName: ca-org2
